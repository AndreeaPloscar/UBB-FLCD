# [-1, -1]
var [-1, -1]
ID [3, 0]
:: [-1, -1]
int [-1, -1]
var [-1, -1]
ID [2, 0]
:: [-1, -1]
int [-1, -1]
= [-1, -1]
CONST [2, 1]
var [-1, -1]
ID [3, 1]
:: [-1, -1]
int [-1, -1]
= [-1, -1]
CONST [1, 0]
asla [-1, -1]
[ [-1, -1]
ID [2, 0]
< [-1, -1]
ID [3, 0]
/ [-1, -1]
CONST [2, 1]
] [-1, -1]
{ [-1, -1]
if [-1, -1]
ID [3, 0]
% [-1, -1]
ID [2, 0]
== [-1, -1]
CONST [0, 0]
{ [-1, -1]
ID [3, 1]
:= [-1, -1]
CONST [0, 0]
} [-1, -1]
ID [2, 0]
+:= [-1, -1]
CONST [1, 0]
} [-1, -1]
print [-1, -1]
( [-1, -1]
CONST [1, 1]
, [-1, -1]
ID [3, 1]
) [-1, -1]
# [-1, -1]
