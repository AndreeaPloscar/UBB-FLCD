# [-1, -1]
var [-1, -1]
ID [3, 0]
:: [-1, -1]
int [-1, -1]
= [-1, -1]
CONST [0, 0]
var [-1, -1]
ID [0, 1]
:: [-1, -1]
int [-1, -1]
= [-1, -1]
CONST [1, 0]
var [-1, -1]
ID [3, 1]
:: [-1, -1]
arr [-1, -1]
[ [-1, -1]
int [-1, -1]
CONST [1, 0]
] [-1, -1]
var [-1, -1]
ID [3, 2]
:: [-1, -1]
int [-1, -1]
read [-1, -1]
( [-1, -1]
ID [3, 1]
) [-1, -1]
for [-1, -1]
[ [-1, -1]
ID [3, 2]
:= [-1, -1]
CONST [1, 1]
, [-1, -1]
ID [3, 2]
<= [-1, -1]
ID [0, 1]
, [-1, -1]
ID [3, 2]
+:= [-1, -1]
CONST [1, 1]
] [-1, -1]
{ [-1, -1]
ID [3, 0]
+:= [-1, -1]
ID [3, 1]
[ [-1, -1]
ID [3, 2]
] [-1, -1]
} [-1, -1]
print [-1, -1]
( [-1, -1]
ID [3, 0]
) [-1, -1]
# [-1, -1]
