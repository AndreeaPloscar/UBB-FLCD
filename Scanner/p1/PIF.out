# [-1, -1]
var [-1, -1]
ID [3, 0]
:: [-1, -1]
int [-1, -1]
var [-1, -1]
ID [0, 0]
:: [-1, -1]
int [-1, -1]
var [-1, -1]
ID [1, 0]
:: [-1, -1]
int [-1, -1]
var [-1, -1]
ID [2, 0]
:: [-1, -1]
str [-1, -1]
= [-1, -1]
CONST [3, 1]
print [-1, -1]
( [-1, -1]
CONST [3, 2]
) [-1, -1]
read [-1, -1]
( [-1, -1]
ID [3, 0]
) [-1, -1]
print [-1, -1]
( [-1, -1]
CONST [0, 1]
) [-1, -1]
read [-1, -1]
( [-1, -1]
ID [0, 0]
) [-1, -1]
print [-1, -1]
( [-1, -1]
CONST [0, 1]
) [-1, -1]
read [-1, -1]
( [-1, -1]
ID [1, 0]
) [-1, -1]
if [-1, -1]
ID [3, 0]
> [-1, -1]
ID [0, 0]
& [-1, -1]
ID [3, 0]
> [-1, -1]
ID [1, 0]
{ [-1, -1]
print [-1, -1]
( [-1, -1]
ID [2, 0]
, [-1, -1]
ID [3, 0]
) [-1, -1]
} [-1, -1]
else [-1, -1]
{ [-1, -1]
if [-1, -1]
ID [0, 0]
> [-1, -1]
ID [3, 0]
& [-1, -1]
ID [0, 0]
> [-1, -1]
ID [1, 0]
{ [-1, -1]
print [-1, -1]
( [-1, -1]
ID [2, 0]
, [-1, -1]
ID [0, 0]
) [-1, -1]
} [-1, -1]
else [-1, -1]
{ [-1, -1]
print [-1, -1]
( [-1, -1]
ID [2, 0]
, [-1, -1]
ID [1, 0]
) [-1, -1]
} [-1, -1]
} [-1, -1]
# [-1, -1]
